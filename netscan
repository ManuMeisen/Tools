#!/bin/bash

# Colores para resaltado
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Sin color

# Función para realizar un ping a un host y extraer el TTL de la respuesta
get_ttl() {
    local host="$1"
    local ttl=$(ping -c 1 -w 1 "$host" | grep "ttl=" | sed 's/.*ttl=\([0-9]*\).*/\1/' 2>/dev/null)
    if [ -z "$ttl" ]; then
        ttl="Unknown"
    fi
    echo "$ttl"
}

# Función para determinar el sistema operativo basado en el TTL
get_os() {
    local ttl="$1"
    local os="Unknown"
    if [ "$ttl" == "Unknown" ]; then
        return
    elif [ "$ttl" -eq 63 ] || [ "$ttl" -eq 64 ]; then
        os="Linux/Unix"
    elif [ "$ttl" -eq 127 ] || [ "$ttl" -eq 128 ]; then
        os="Windows"
    fi
    echo "$os"
}

# Función para verificar si una dirección IP es el gateway
is_gateway() {
    local ip="$1"
    # Puedes ajustar esta condición según la forma en que defines el gateway
    if [[ "$ip" == "$(echo "$start_ip" | cut -d '.' -f 1-3).1" ]]; then
        return 0
    else
        return 1
    fi
}

# Verificar si se proporciona la dirección IP como argumento
if [ -z "$1" ]; then
    echo "Por favor, proporciona una dirección IP como argumento."
    exit 1
fi

# Dirección IP del host donde se ejecuta el script
local_ip=$(hostname -I | awk '{print $1}')

# Rango de direcciones IP a escanear (modifica según tus necesidades)
start_ip="$1"

# Bucle para escanear cada dirección IP en el rango especificado
for ((i = 1; i <= 254; i++)); do
    ip=$(echo "$start_ip" | cut -d '.' -f 1-3)."$i"
    (
        ttl=$(get_ttl "$ip")
        os=$(get_os "$ttl")
        if [ "$os" != "Unknown" ] && [ "$ttl" != "Unknown" ]; then
            if is_gateway "$ip"; then
                echo -e "${ORANGE}Gateway: $ip - TTL: $ttl - Sistema Operativo: $os${NC}"
            elif [ "$ip" == "$local_ip" ]; then
                echo -e "${GREEN}Host local: $ip - TTL: $ttl - Sistema Operativo: $os${NC}"
            elif [ "$os" == "Windows" ]; then
                echo -e "${RED}Host: $ip - TTL: $ttl - Sistema Operativo: $os${NC}"
            elif [ "$os" == "Linux/Unix" ]; then
                echo -e "${BLUE}Host: $ip - TTL: $ttl - Sistema Operativo: $os${NC}"
            else
                echo -e "Host: $ip - TTL: $ttl - Sistema Operativo: $os"
            fi
        fi
    ) &
done

# Esperar a que todos los subprocesos terminen
wait
